# ===================== Python Install =====================

# Define Python URLs and installer paths
$pythonX64Url = "https://www.python.org/ftp/python/3.8.0/python-3.8.0-amd64.exe"
$pythonX86Url = "https://www.python.org/ftp/python/3.8.0/python-3.8.0.exe"

$pythonX64Installer = "$env:TEMP\python-3.8.0-amd64.exe"
$pythonX86Installer = "$env:TEMP\python-3.8.0.exe"

# Install directories
$installDirX64 = "C:\python-3.8-x64"
$installDirX86 = "C:\python-3.8-x86"

# Download Python installers
Invoke-WebRequest -Uri $pythonX64Url -OutFile $pythonX64Installer
Invoke-WebRequest -Uri $pythonX86Url -OutFile $pythonX86Installer

# Install Python silently
Start-Process -FilePath $pythonX64Installer -ArgumentList "/quiet InstallAllUsers=1 TargetDir=`"$installDirX64`" Include_test=0" -Wait
Start-Process -FilePath $pythonX86Installer -ArgumentList "/quiet InstallAllUsers=1 TargetDir=`"$installDirX86`" Include_test=0" -Wait

# Add to system PATH
function Add-ToSystemPath {
    param ([string]$NewPath)
    $currentPath = [Environment]::GetEnvironmentVariable("Path", [EnvironmentVariableTarget]::Machine)
    if ($currentPath -notlike "*$NewPath*") {
        [Environment]::SetEnvironmentVariable("Path", "$currentPath;$NewPath", [EnvironmentVariableTarget]::Machine)
        Write-Host "Added $NewPath to system PATH"
    }
}

Add-ToSystemPath "$installDirX64"
Add-ToSystemPath "$installDirX64\Scripts"
Add-ToSystemPath "$installDirX86"
Add-ToSystemPath "$installDirX86\Scripts"

$env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine")
Write-Host "`n? Python installation complete."

# ===================== x64dbg Setup =====================

# Define URLs and base directory
$snapshotUrl = "https://excellmedia.dl.sourceforge.net/project/x64dbg/snapshots/snapshot_2025-03-15_15-57.zip?viasf=1"
$pluginUrl   = "https://raw.githubusercontent.com/amohanta/Malware_Analysis_Tools-third_party/refs/heads/main/x64Dbg-Plugins/x64Dbg-all-plugins_v2.zip"
$baseDir     = "C:\tools"

# Define local zip paths
$snapshotZip = "$baseDir\x64dbg_snapshot.zip"
$pluginZip   = "$baseDir\x64dbg_plugins.zip"

# Define extraction directories
$snapshotExtractDir = "$baseDir\x64dbg_snapshot"
$pluginExtractDir   = "$baseDir\x64dbg_plugins"

# Create required directories
foreach ($dir in @($baseDir, $snapshotExtractDir, $pluginExtractDir)) {
    if (-not (Test-Path $dir)) {
        New-Item -Path $dir -ItemType Directory | Out-Null
    }
}

Write-Host "`nDownloading x64dbg snapshot..."
Invoke-WebRequest -Uri $snapshotUrl -OutFile $snapshotZip

Write-Host "Downloading x64dbg plugins..."
Invoke-WebRequest -Uri $pluginUrl -OutFile $pluginZip

Write-Host "Extracting x64dbg snapshot..."
Expand-Archive -LiteralPath $snapshotZip -DestinationPath $snapshotExtractDir -Force

Write-Host "Extracting x64dbg plugins..."
Expand-Archive -LiteralPath $pluginZip -DestinationPath $pluginExtractDir -Force

# Define plugin targets
$x32PluginTarget = Join-Path -Path $snapshotExtractDir -ChildPath "release\x32\Plugins"
$x64PluginTarget = Join-Path -Path $snapshotExtractDir -ChildPath "release\x64\Plugins"

# Ensure plugin folders exist
foreach ($pluginDir in @($x32PluginTarget, $x64PluginTarget)) {
    if (-not (Test-Path $pluginDir)) {
        New-Item -Path $pluginDir -ItemType Directory | Out-Null
    }
}

# Copy plugins
$x32PluginSource = Join-Path -Path $pluginExtractDir -ChildPath "x32"
if (Test-Path $x32PluginSource) {
    Write-Host "Copying x32 plugins..."
    Copy-Item -Path "$x32PluginSource\*" -Destination $x32PluginTarget -Recurse -Force
} else {
    Write-Warning "x32 plugin source folder not found!"
}

$x64PluginSource = Join-Path -Path $pluginExtractDir -ChildPath "x64"
if (Test-Path $x64PluginSource) {
    Write-Host "Copying x64 plugins..."
    Copy-Item -Path "$x64PluginSource\*" -Destination $x64PluginTarget -Recurse -Force
} else {
    Write-Warning "x64 plugin source folder not found!"
}

# Cleanup
Write-Host "Cleaning up downloaded ZIP files..."
Remove-Item $snapshotZip, $pluginZip -Force

Write-Host "`n? x64dbg snapshot and plugins are ready."
