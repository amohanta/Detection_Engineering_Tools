#written by Abhijit mohanta and chatgpt
#script lists the API's called and the string referenced in a function. Also gives hints about the usage of API and string 
#upgraded to exclude FUNC_ prefixed functions from API call logging

import os
from ghidra.program.model.listing import Function
from ghidra.program.model.symbol import RefType

# Hard-coded dictionaries for API functionality and string functionality
api_functionality = {
    ##############################################################
    # String Manipulation APIs
    ##############################################################
    "lstrcmpiW": "string comparison",
    "lstrcatW": "string concatenation",
    "lstrcmpiA": "string comparison",
    "lstrcatA": "string concatenation",
    "lstrlenA": "string length",
    "lstrlenW": "string length",
    "StrStrW": "check if string is substring",
    "StrStrA": "check if string is substring",
    "lstrcpyW": "string copy",
    "lstrcpyA": "string copy",
    "wsprintfW": "string formatting",
    "wsprintfA": "string formatting",
    "sprintf": "string formatting (potential buffer overflow risk)",
    "swprintf": "wide string formatting (potential buffer overflow risk)",
    "strncpy": "string copy with length limit",
    "wcsncpy": "wide string copy with length limit",
    "strncat": "string concatenation with length limit",
    "wcsncat": "wide string concatenation with length limit",
    "strtok": "string tokenization",
    "wcstok": "wide string tokenization",
    "MultiByteToWideChar": "character set conversion",
    "WideCharToMultiByte": "character set conversion",

    ##############################################################
    # File System APIs
    ##############################################################
    "GetLogicalDrives": "Get list of drives",
    "GetDriveTypeW": "Get Drive Type",
    "FindFirstFileW": "file iteration",
    "FindFirstFileA": "file iteration",
    "FindNextFileW": "file iteration",
    "FindNextFileA": "file iteration",
    "CopyFileW": "copy file",
    "CopyFileA": "copy file",
    "CopyFileExW": "copy file with progress callback",
    "CopyFileExA": "copy file with progress callback",
    "MoveFileW": "move/rename file",
    "MoveFileA": "move/rename file",
    "MoveFileExW": "move/rename file with flags",
    "MoveFileExA": "move/rename file with flags",
    "DeleteFileW": "delete file",
    "DeleteFileA": "delete file",
    "CreateFileA": "Creates or opens a file",
    "CreateFileW": "Creates or opens a file",
    "WriteFileA": "Writes data to a file",
    "WriteFileW": "Writes data to a file",
    "ReadFileA": "Reads data from a file",
    "ReadFileW": "Reads data from a file",
    "SetFileAttributesW": "change attribute of a file",
    "SetFileAttributesA": "change attribute of a file",
    "GetFileAttributesW": "get file attributes",
    "GetFileAttributesA": "get file attributes",
    "GetFileAttributesExW": "get extended file attributes",
    "GetFileAttributesExA": "get extended file attributes",
    "SetFilePointer": "sets pointer in file before writing",
    "SetFilePointerEx": "sets pointer in file before writing (extended)",
    "SHGetSpecialFolderPathW": "get path of special folder",
    "SHGetSpecialFolderPathA": "get path of special folder",
    "GetTempPathW": "get temporary directory path",
    "GetTempPathA": "get temporary directory path",
    "GetTempFileNameW": "create temporary file",
    "GetTempFileNameA": "create temporary file",
    "CreateDirectoryW": "create directory",
    "CreateDirectoryA": "create directory",
    "CreateDirectoryExW": "create directory with template",
    "RemoveDirectoryW": "remove directory",
    "RemoveDirectoryA": "remove directory",
    "GetFileSize": "get file size",
    "GetFileSizeEx": "get file size (extended)",
    "GetFileTime": "get file timestamps",
    "SetFileTime": "set file timestamps",
    "FindClose": "close file search handle",
    "FlushFileBuffers": "flush file buffers to disk",
    "LockFile": "lock region of file",
    "UnlockFile": "unlock region of file",
    "GetFullPathNameW": "convert relative path to absolute",
    "GetFullPathNameA": "convert relative path to absolute",

    ##############################################################
    # Memory Management APIs
    ##############################################################
    "LocalAlloc": "memory allocation",     
    "VirtualAlloc": "memory allocation (can be used for code injection)",
    "VirtualAllocEx": "memory allocation in remote process (code injection)",
    "VirtualProtect": "change memory protection (often used in shellcode)",
    "VirtualProtectEx": "change memory protection in remote process",
    "VirtualFree": "free virtual memory",
    "VirtualFreeEx": "free virtual memory in remote process",
    "WriteProcessMemory": "write to process memory (if remote process then code injection)",
    "ReadProcessMemory": "read from process memory (information stealing)",
    "HeapAlloc": "Memory allocation",
    "HeapCreate": "create private heap",
    "HeapDestroy": "destroy private heap",
    "HeapFree": "memory free",
    "LocalFree": "memory free",
    "GlobalAlloc": "memory allocation (legacy)",
    "GlobalFree": "memory free (legacy)",
    "RtlMoveMemory": "memory copy (often used in shellcode)",
    "RtlCopyMemory": "memory copy (often used in shellcode)",
    "RtlFillMemory": "memory fill (often used in shellcode)",
    "RtlZeroMemory": "memory zero (often used in shellcode)",

    ##############################################################
    # Process and Thread APIs (Common in Malware)
    ##############################################################
    "CreateProcessA": "create new process",
    "CreateProcessW": "create new process",
    "CreateProcessAsUserA": "create process as specific user",
    "CreateProcessAsUserW": "create process as specific user",
    "CreateRemoteThread": "create thread in remote process (code injection)",
    "OpenProcess": "open handle to process (often before injection)",
    "TerminateProcess": "terminate process",
    "ExitProcess": "terminate current process",
    "GetCurrentProcess": "get handle to current process",
    "GetCurrentProcessId": "get current process ID",
    "GetProcessId": "get process ID from handle",
    "GetProcessHandleCount": "get count of open handles",
    "CreateThread": "create new thread",
    "ExitThread": "terminate current thread",
    "GetCurrentThread": "get handle to current thread",
    "GetCurrentThreadId": "get current thread ID",
    "ResumeThread": "resume suspended thread",
    "SuspendThread": "suspend thread",
    "TerminateThread": "terminate thread",
    "QueueUserAPC": "queue asynchronous procedure call (can be used for injection)",
    "SetThreadContext": "modify thread context (can be used for code injection)",
    "GetThreadContext": "get thread context",
    "Wow64SetThreadContext": "set thread context in WOW64",
    "Wow64GetThreadContext": "get thread context in WOW64",
    "IsWow64Process": "check if process is running under WOW64",
    "Process32FirstW": "process enumeration",
    "Process32NextW": "process enumeration",
    "CreateToolhelp32Snapshot": "create snapshot for process/thread/module enumeration",
    "Thread32First": "thread enumeration",
    "Thread32Next": "thread enumeration",
    "GetStartupInfoA": "get startup information",
    "GetStartupInfoW": "get startup information",
    "GetModuleFileNameA": "get path of executable module",
    "GetModuleFileNameW": "get path of executable module",

    ##############################################################
    # DLL and Module APIs (Common in Malware)
    ##############################################################
    "LoadLibraryA": "load DLL",
    "LoadLibraryW": "load DLL",
    "LoadLibraryExA": "load DLL with options",
    "LoadLibraryExW": "load DLL with options",
    "GetProcAddress": "get function address from DLL (often used with LoadLibrary)",
    "FreeLibrary": "unload DLL",
    "GetModuleHandleA": "get handle to loaded module",
    "GetModuleHandleW": "get handle to loaded module",
    "GetModuleHandleExA": "get handle to loaded module with options",
    "GetModuleHandleExW": "get handle to loaded module with options",

    ##############################################################
    # Network APIs (Common in Malware)
    ##############################################################
    "WSAStartup": "initialize Winsock",
    "WSACleanup": "cleanup Winsock",
    "socket": "create socket",
    "connect": "connect socket",
    "bind": "bind socket to address",
    "listen": "listen for connections",
    "accept": "accept connection",
    "send": "send data",
    "recv": "receive data",
    "sendto": "send data to specific address",
    "recvfrom": "receive data and get sender address",
    "closesocket": "close socket",
    "gethostbyname": "resolve hostname to IP",
    "gethostbyaddr": "resolve IP to hostname",
    "getaddrinfo": "resolve hostname to IP (modern)",
    "getnameinfo": "resolve IP to hostname (modern)",
    "inet_addr": "convert IP string to binary",
    "inet_ntoa": "convert binary IP to string",
    "HttpOpenRequestA": "open HTTP request",
    "HttpOpenRequestW": "open HTTP request",
    "HttpSendRequestA": "send HTTP request",
    "HttpSendRequestW": "send HTTP request",
    "InternetOpenA": "initialize WinINet",
    "InternetOpenW": "initialize WinINet",
    "InternetConnectA": "connect to Internet server",
    "InternetConnectW": "connect to Internet server",
    "InternetCloseHandle": "close WinINet handle",
    "InternetReadFile": "read from Internet handle",
    "InternetWriteFile": "write to Internet handle",
    "InternetCrackUrlA": "parse URL",
    "InternetCrackUrlW": "parse URL",
    "InternetSetOptionA": "set Internet option",
    "InternetSetOptionW": "set Internet option",
    "URLDownloadToFileA": "download file from URL",
    "URLDownloadToFileW": "download file from URL",
    "WNetOpenEnumW": "used for network resource enumeration",
    "WNetOpenEnumA": "used for network resource enumeration",
    "WNetEnumResourceW": "enumerate network resources",
    "WNetEnumResourceA": "enumerate network resources",
    "WNetCloseEnum": "close network enumeration",

    ##############################################################
    # Registry APIs (Common in Malware)
    ##############################################################
    "RegOpenKeyExW": "open registry key",
    "RegOpenKeyExA": "open registry key",
    "RegCreateKeyExW": "create or open registry key",
    "RegCreateKeyExA": "create or open registry key",
    "RegDeleteKeyW": "delete registry key",
    "RegDeleteKeyA": "delete registry key",
    "RegDeleteValueW": "Delete registry value",
    "RegDeleteValueA": "Delete registry value",
    "RegCloseKey": "close registry key",
    "RegSetValueExW": "set registry value",
    "RegSetValueExA": "set registry value",
    "RegQueryValueExW": "query registry value",
    "RegQueryValueExA": "query registry value",
    "RegEnumKeyExW": "enumerate registry subkeys",
    "RegEnumKeyExA": "enumerate registry subkeys",
    "RegEnumValueW": "enumerate registry values",
    "RegEnumValueA": "enumerate registry values",
    "RegLoadKeyW": "load registry hive",
    "RegLoadKeyA": "load registry hive",
    "RegSaveKeyW": "save registry key to file",
    "RegSaveKeyA": "save registry key to file",
    "RegConnectRegistryW": "connect to remote registry",
    "RegConnectRegistryA": "connect to remote registry",

    ##############################################################
    # Service APIs (Common in Malware)
    ##############################################################
    "OpenSCManagerW": "open service control manager",
    "OpenSCManagerA": "open service control manager",
    "OpenServiceW": "open existing service",
    "OpenServiceA": "open existing service",
    "CreateServiceW": "create new service (persistence mechanism)",
    "CreateServiceA": "create new service (persistence mechanism)",
    "StartServiceW": "start service",
    "StartServiceA": "start service",
    "ControlService": "control service",
    "DeleteService": "delete service",
    "ChangeServiceConfigW": "modify service configuration",
    "ChangeServiceConfigA": "modify service configuration",
    "QueryServiceStatus": "query service status",
    "EnumServicesStatusW": "enumerate services",
    "EnumServicesStatusA": "enumerate services",
    "EnumServicesStatusExW": "enumerate services (extended)",
    "EnumServicesStatusExA": "enumerate services (extended)",

    ##############################################################
    # Windows Hooks and Injection APIs
    ##############################################################
    "SetWindowsHookExW": "set Windows hook (can be used for injection)",
    "SetWindowsHookExA": "set Windows hook (can be used for injection)",
    "UnhookWindowsHookEx": "remove Windows hook",
    "CallNextHookEx": "call next hook in chain",
    "SetWinEventHook": "set event hook",
    "UnhookWinEvent": "remove event hook",
    "GetWindowTextW": "get window text",
    "GetWindowTextA": "get window text",
    "GetWindowTextLengthW": "get length of window text",
    "GetWindowTextLengthA": "get length of window text",
    "GetClassNameW": "get window class name",
    "GetClassNameA": "get window class name",
    "FindWindowW": "find window by class/name",
    "FindWindowA": "find window by class/name",
    "FindWindowExW": "find child window",
    "FindWindowExA": "find child window",
    "EnumWindows": "enumerate top-level windows",
    "EnumChildWindows": "enumerate child windows",
    "GetWindowThreadProcessId": "get process/thread ID from window handle",
    "PostMessageW": "post message to window",
    "PostMessageA": "post message to window",
    "SendMessageW": "send message to window",
    "SendMessageA": "send message to window",
    "SendNotifyMessageW": "send notification message",
    "SendNotifyMessageA": "send notification message",

    ##############################################################
    # Anti-Debugging and Anti-Analysis APIs
    ##############################################################
    "IsDebuggerPresent": "check for debugger (anti-debugging)",
    "CheckRemoteDebuggerPresent": "check for remote debugger (anti-debugging)",
    "OutputDebugStringW": "output debug string (can be used to detect debugger)",
    "OutputDebugStringA": "output debug string (can be used to detect debugger)",
    "GetTickCount": "get tick count (can be used for timing checks)",
    "QueryPerformanceCounter": "high-resolution timer (can be used for timing checks)",
    "NtQueryInformationProcess": "query process information (can detect debugging)",
    "NtSetInformationThread": "set thread information (can hide from debugger)",
    "NtQuerySystemInformation": "query system information (can detect VMs)",
    "NtDelayExecution": "delay execution (sleep evasion)",
    "NtGetContextThread": "get thread context (anti-debug)",
    "NtSetContextThread": "set thread context (anti-debug)",
    "NtContinue": "continue execution (anti-debug)",
    "ZwQueryInformationProcess": "query process information (can detect debugging)",
    "ZwSetInformationThread": "set thread information (can hide from debugger)",
    "ZwQuerySystemInformation": "query system information (can detect VMs)",
    "ZwDelayExecution": "delay execution (sleep evasion)",
    "ZwGetContextThread": "get thread context (anti-debug)",
    "ZwSetContextThread": "set thread context (anti-debug)",
    "ZwContinue": "continue execution (anti-debug)",
    "RtlAdjustPrivilege": "adjust privilege level",
    "RtlGetVersion": "get OS version",
    "DbgBreakPoint": "debug breakpoint",
    "DbgUiRemoteBreakin": "remote debug break",
    "GetSystemTime": "get system time (timing checks)",
    "GetLocalTime": "get local time (timing checks)",
    "GetSystemTimeAsFileTime": "get system time as file time (timing checks)",

    ##############################################################
    # Privilege Escalation APIs
    ##############################################################
    "OpenProcessToken": "open process token (privilege escalation)",
    "OpenThreadToken": "open thread token (privilege escalation)",
    "AdjustTokenPrivileges": "adjust token privileges (privilege escalation)",
    "LookupPrivilegeValueW": "look up privilege value (privilege escalation)",
    "LookupPrivilegeValueA": "look up privilege value (privilege escalation)",
    "ImpersonateLoggedOnUser": "impersonate logged on user",
    "RevertToSelf": "stop impersonation",
    "DuplicateTokenEx": "duplicate token (privilege escalation)",
    "SetTokenInformation": "set token information",
    "GetTokenInformation": "get token information",
    "LogonUserW": "logon user (credential theft)",
    "LogonUserA": "logon user (credential theft)",
    "CredEnumerateW": "enumerate stored credentials (credential theft)",
    "CredEnumerateA": "enumerate stored credentials (credential theft)",
    "CredReadW": "read stored credential (credential theft)",
    "CredReadA": "read stored credential (credential theft)",
    "CredWriteW": "write credential (credential theft)",
    "CredWriteA": "write credential (credential theft)",
    "CredDeleteW": "delete credential",
    "CredDeleteA": "delete credential",
    "CredFree": "free credential buffer",

    ##############################################################
    # Cryptography APIs (Common in Ransomware)
    ##############################################################
    "CryptAcquireContextW": "CryptoAPI initialization",
    "CryptAcquireContextA": "CryptoAPI initialization",
    "CryptReleaseContext": "CryptoAPI cleanup",   
    "CryptCreateHash": "create hash object",
    "CryptHashData": "hash data",
    "CryptGetHashParam": "get hash parameters",
    "CryptDestroyHash": "destroy hash object",
    "CryptDeriveKey": "derive key from hash",
    "CryptGenKey": "generate random key (possible for ransomware)",
    "CryptGenRandom": "generate random bytes",
    "CryptExportKey": "write key BLOB to a buffer (can be written to file)",
    "CryptImportKey": "import key from BLOB",
    "CryptEncrypt": "encrypt data",
    "CryptDecrypt": "decrypt data",
    "CryptProtectData": "protect (encrypt) data with user credentials",
    "CryptUnprotectData": "unprotect (decrypt) data with user credentials",
    "CryptStringToBinaryW": "convert encoded string to binary",
    "CryptStringToBinaryA": "convert encoded string to binary",
    "CryptBinaryToStringW": "convert binary to encoded string",
    "CryptBinaryToStringA": "convert binary to encoded string",
    "BCryptGenRandom": "generate random bytes (CNG)",
    "BCryptEncrypt": "encrypt data (CNG)",
    "BCryptDecrypt": "decrypt data (CNG)",
    "BCryptCreateHash": "create hash object (CNG)",
    "BCryptHashData": "hash data (CNG)",
    "BCryptFinishHash": "finish hashing (CNG)",
    "BCryptDestroyHash": "destroy hash object (CNG)",
    "BCryptGenerateSymmetricKey": "generate symmetric key (CNG)",
    "BCryptDestroyKey": "destroy key (CNG)",
    "BCryptExportKey": "export key (CNG)",
    "BCryptImportKey": "import key (CNG)",

    ##############################################################
    # Miscellaneous Malware-Relevant APIs
    ##############################################################
    "ShellExecuteW": "execute command or file",
    "ShellExecuteA": "execute command or file",
    "ShellExecuteExW": "execute command or file (extended)",
    "ShellExecuteExA": "execute command or file (extended)",
    "WinExec": "execute command (legacy)",
    "CreateMutexW": "create mutex (often used for single instance check)",
    "CreateMutexA": "create mutex (often used for single instance check)",
    "OpenMutexW": "open existing mutex",
    "OpenMutexA": "open existing mutex",
    "ReleaseMutex": "release mutex",
    "WaitForSingleObject": "wait for object (used in synchronization)",
    "WaitForMultipleObjects": "wait for multiple objects",
    "Sleep": "delay execution (can be used for evasion)",
    "SleepEx": "delay execution with alertable wait",
    "GetSystemDirectoryW": "get system directory path",
    "GetSystemDirectoryA": "get system directory path",
    "GetWindowsDirectoryW": "get Windows directory path",
    "GetWindowsDirectoryA": "get Windows directory path",
    "GetUserNameW": "get current username",
    "GetUserNameA": "get current username",
    "GetComputerNameW": "get computer name",
    "GetComputerNameA": "get computer name",
    "GetVersionExW": "get OS version information",
    "GetVersionExA": "get OS version information",
    "GetNativeSystemInfo": "get system information",
    "GetSystemInfo": "get system information",
    "GlobalMemoryStatusEx": "get memory status",
    "GetDiskFreeSpaceExW": "get disk free space",
    "GetDiskFreeSpaceExA": "get disk free space",
    "SHGetFolderPathW": "get special folder path",
    "SHGetFolderPathA": "get special folder path",
    "SHGetKnownFolderPath": "get known folder path",
    "CoInitialize": "initialize COM",
    "CoInitializeEx": "initialize COM with options",
    "CoUninitialize": "uninitialize COM",
    "CoCreateInstance": "create COM object instance",
    "CoGetClassObject": "get COM class factory",
    "CLSIDFromString": "convert CLSID string to binary",
    "StringFromCLSID": "convert CLSID binary to string",
    "OleInitialize": "initialize OLE",
    "OleUninitialize": "uninitialize OLE",
    "CloseHandle": "close handle",
    "DuplicateHandle": "duplicate handle",
    "DeviceIoControl": "direct device control (often used for rootkits)",
    "GetAdaptersInfo": "get network adapter information",
    "GetAdaptersAddresses": "get network adapter addresses",
    "GetIpAddrTable": "get IP address table",
    "GetIpNetTable": "get ARP table",
    "GetTcpTable": "get TCP connection table",
    "GetUdpTable": "get UDP listener table",
    "GetExtendedTcpTable": "get extended TCP connection table",
    "GetExtendedUdpTable": "get extended UDP listener table",
    "IcmpSendEcho": "send ICMP echo (ping)",
    "GetHostNameW": "get hostname",
    "GetHostNameA": "get hostname",
    "gethostname": "get hostname (Winsock)",
    "WNetGetConnectionW": "get network connection information",
    "WNetGetConnectionA": "get network connection information",
    "WNetGetUniversalNameW": "get universal name for network resource",
    "WNetGetUniversalNameA": "get universal name for network resource",
    "WNetAddConnectionW": "add network connection",
    "WNetAddConnectionA": "add network connection",
    "WNetAddConnection2W": "add network connection (extended)",
    "WNetAddConnection2A": "add network connection (extended)",
    "WNetAddConnection3W": "add network connection (extended)",
    "WNetAddConnection3A": "add network connection (extended)",
    "WNetCancelConnectionW": "cancel network connection",
    "WNetCancelConnectionA": "cancel network connection",
    "WNetCancelConnection2W": "cancel network connection (extended)",
    "WNetCancelConnection2A": "cancel network connection (extended)",
    "WNetUseConnectionW": "use network connection",
    "WNetUseConnectionA": "use network connection",
}

string_functionality = {
    # Anti-VM and Anti-Sandbox strings
    "VBOX": "VirtualBox detection (Anti-VM)",
    "VMWARE": "VMware detection (Anti-VM)",
    "VIRTUAL": "Generic virtual machine detection (Anti-VM)",
    "QEMU": "QEMU detection (Anti-VM)",
    "XEN": "Xen detection (Anti-VM)",
    "SANDBOX": "Sandbox detection (Anti-Analysis)",
    "ANALYSIS": "Analysis environment detection (Anti-Analysis)",
    "DEBUG": "Debug environment detection (Anti-Debug)",
    "PROCMON": "Process Monitor detection (Anti-Analysis)",
    "WIRESHARK": "Wireshark detection (Anti-Analysis)",
    "PROCEXP": "Process Explorer detection (Anti-Analysis)",
    "IDA": "IDA Pro detection (Anti-Analysis)",
    "WINDBG": "WinDbg detection (Anti-Debug)",
    "OLYDBG": "OllyDbg detection (Anti-Debug)",
    "IMMUNITY": "Immunity Debugger detection (Anti-Debug)",
    
    # Ransomware-related strings
    "bcdedit": "backup deletion in Ransomware",
    "vssadmin": "Volume Shadow Copy deletion in Ransomware",
    "shadowcopy": "Volume Shadow Copy targeting in Ransomware",
    "bitlocker": "BitLocker encryption targeting",
    "encrypt": "Encryption indicator (Ransomware)",
    "decrypt": "Decryption indicator (Ransomware)",
    "ransom": "Ransom demand indicator",
    "bitcoin": "Bitcoin payment address indicator",
    "monero": "Monero payment address indicator",
    ".encrypted": "Encrypted file extension (Ransomware)",
    ".locked": "Locked file extension (Ransomware)",
    "readme.txt": "Ransom note filename",
    "restore_files.txt": "Ransom note filename",
    "how_to_decrypt.txt": "Ransom note filename",
    
    # Malware persistence mechanisms
    "RunOnce": "Registry run key (persistence)",
    "RunServices": "Registry run key (persistence)",
    "RunServicesOnce": "Registry run key (persistence)",
    "HKEY_LOCAL_MACHINE": "Registry hive (persistence)",
    "HKEY_CURRENT_USER": "Registry hive (persistence)",
    "Startup": "Startup folder (persistence)",
    "Start Menu": "Startup folder (persistence)",
    "Task Scheduler": "Task Scheduler (persistence)",
    "schtasks": "Task Scheduler command (persistence)",
    "at.exe": "Task Scheduler command (legacy persistence)",
    
    # Malware command and control
    "http://": "HTTP C2 communication",
    "https://": "HTTPS C2 communication",
    "ftp://": "FTP C2 communication",
    "user-agent": "HTTP User-Agent string (C2 communication)",
    "bot_id": "Bot identifier (C2 communication)",
    "command": "C2 command indicator",
    "result": "C2 result indicator",
    "update": "C2 update command",
    "download": "C2 download command",
    "upload": "C2 upload command",
    "execute": "C2 execute command",
    "inject": "C2 inject command",
    "spread": "C2 spread command",
    
    # Exploit-related strings
    "CVE-": "Common Vulnerabilities and Exposures reference",
    "exploit": "Exploit code indicator",
    "payload": "Exploit payload indicator",
    "ROP": "Return-Oriented Programming indicator",
    "shellcode": "Shellcode indicator",
    "gadget": "ROP gadget indicator",
    "spray": "Heap spray indicator",
    
    # Credential theft
    "password": "Credential theft indicator",
    "login": "Credential theft indicator",
    "credential": "Credential theft indicator",
    "bank": "Financial credential targeting",
    "paypal": "Payment credential targeting",
    "creditcard": "Payment credential targeting",
    "cvv": "Payment credential targeting",
    "cookie": "Browser cookie theft",
    "autofill": "Browser autofill data theft",
    
    # System information gathering
    "ipconfig": "Network configuration gathering",
    "ifconfig": "Network configuration gathering (Unix)",
    "netstat": "Network connection enumeration",
    "arp": "ARP table enumeration",
    "route": "Routing table enumeration",
    "systeminfo": "System information gathering",
    "whoami": "User information gathering",
    "hostname": "Hostname gathering",
    
    # Lateral movement
    "psexec": "PsExec lateral movement",
    "wmic": "WMIC lateral movement",
    "winrm": "WinRM lateral movement",
    "smb": "SMB lateral movement",
    "net use": "Network share lateral movement",
    "sc": "Service Controller lateral movement",
    
    # Add more strings and their functionalities here
}

# Function to get all functions in the current program
def get_functions():
    function_manager = currentProgram.getFunctionManager()
    functions = function_manager.getFunctions(True)
    return functions

# Function to get instruction addresses and their corresponding API calls
# Function to get instruction addresses and their corresponding API calls
# Function to get instruction addresses and their corresponding API calls
def get_instruction_addresses_and_apis(func):
    listing = currentProgram.getListing()
    instructions = listing.getInstructions(func.getBody(), True)
    
    api_calls = []
    
    for instruction in instructions:
        for reference in instruction.getReferencesFrom():
            if reference.getReferenceType().isCall():
                target_function = getFunctionAt(reference.getToAddress())
                if target_function:
                    api_name = target_function.getName()
                    # Skip functions that start with "FUNC_", "API_", or "FUN_"
                    if api_name.startswith("FUNC_") or api_name.startswith("API_") or api_name.startswith("FUN_"):
                        continue
                    functionality = api_functionality.get(api_name, "Unknown")
                    api_calls.append((instruction.getAddress(), instruction, api_name, functionality))
                    
    return api_calls

# Function to get string references in a function
def get_strings_in_function(func):
    listing = currentProgram.getListing()
    instructions = listing.getInstructions(func.getBody(), True)
    
    string_references = []
    
    for instruction in instructions:
        for reference in instruction.getReferencesFrom():
            data = getDataAt(reference.getToAddress())
            if data and data.getDataType().getDisplayName().lower() in ["string", "unicode"]:
                string_value = str(data.getValue())
                functionality = "Unknown"
                for key, value in string_functionality.items():
                    if key.lower() in string_value.lower():
                        functionality = value
                        break
                string_references.append((instruction.getAddress(), instruction, string_value, functionality))
    
    return string_references

# Main function to print API calls and string references for each function
def main():
    try:
        output_file = os.path.join(os.getenv('TEMP'), 'ghidra_output.txt')
        
        with open(output_file, 'w') as f:
            functions = get_functions()
            
            for func in functions:
                start_addr = func.getBody().getMinAddress()
                end_addr = func.getBody().getMaxAddress()
                
                f.write("\n\n**************************************\n")
                f.write("\nFunction: {} (Start: {}, End: {})\n".format(func.getName(), start_addr, end_addr))
                
                # Print API calls
                api_calls = get_instruction_addresses_and_apis(func)
                if api_calls:
                    f.write("API Calls:\n")
                    for addr, instr, api, functionality in api_calls:
                        f.write("  => {} - {}  => API called : {}, API Functionality: {}\n".format(addr, instr, api, functionality))
                else:
                    f.write("No API Calls found.\n")
                
                # Print string references
                string_refs = get_strings_in_function(func)
                if string_refs:
                    f.write("String References:\n")
                    for addr, instr, string, functionality in string_refs:
                        f.write("  => {} - {}  => String refered: {}, string used for: {}\n".format(addr, instr, string, functionality))
                else:
                    f.write("No String References found.\n")
        
        # Open the output file in Notepad
        os.system('notepad.exe "{}"'.format(output_file))
    
    except Exception as e:
        print("Error occurred:", e)

# Run the main function
main()